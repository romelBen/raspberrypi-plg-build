version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}
  alert_manager: {}
  grafana: {}
  portainer_data:

# Uploads the files necessary for the configurement of Prometheus, Node Exporter
# and Alert Manager
configs:
  prom_rules:
    file: /home/romelben/plg-compose/prometheus/prometheus.yml
  alert_rules:
    file: /home/romelben/plg-compose/prometheus/alert.rules

#### IMPORTANT: You must create the network first or you will get an error:
#### "sudo docker network create --diver=overlay traefik-public"
# When using docker-composes network, diver "overlay" to enable-host communication.
# Here is documentation on multi-host networking: https://docs.docker.com/network/network-tutorial-overlay/
networks:
  traefik-public:
    name: traefik-public
    driver: external # Use "external" if there is a pre-existing network.
    attachable: true
#  monitor-hub:
#    name: monitor-hub
#    driver: overlay
#    attachable: true # If network monitor-hub has been created, use attachable = true to attach desired containers

services:
# 1ST CONTAINER
  ### Nginx Proxy Manager is a load balancer and reverse proxy which will be used for our home project. It allows
  ### SSL encryption and proxying of our services as well as a cool interface to interact with our services!
  ### Nginx Proxy Manager will be contained in a container using MySQL as the database.
  ### Page of service: https://nginxproxymanager.com/setup/#running-on-raspberry-pi-arm-devices
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # Public HTTP Port:
      - '80:80'
      # Public HTTPS Port:
      - '443:443'
      # Admin Web Port:
      - '81:81'
    # environment:
    # ### These environment variables should NOT be shown to ANYONE! Not even yo mama or wife (unless she knows how to work MySQL).
    # ### Make sure to create a process of calling your environment variables from another file like env in Docker.
    #   DB_MYSQL_HOST: "db"
    #   DB_MYSQL_PORT: 3306
    #   DB_MYSQL_USER: "npm"
    #   DB_MYSQL_PASSWORD: "npm"
    #   DB_MYSQL_NAME: "npm"
    volumes:
      - ./data/nginx-proxy-manager:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - db
  db:
    image: yobasystems/alpine-mariadb:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ./data/mysql:/var/lib/mysql


# # 2ND CONTAINER
#   ### Grafana is a visual platform for monitoring data that is categorized by supported platforms
#   ### The current services that are used are Prometheus, Node Exporter, and cAdvisor.
#   ### In the future I would like to implement Promtail and Loki into Grafana to monitor logs in one
#   ### holistic tool.
#   grafana:
#     image: grafana/grafana-arm64v8-linux
#     depends_on:
#       - prometheus
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./grafana/provisioning/:/etc/grafana/provisioning/
#     env_file:
#       - ./grafana/config.monitoring
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role == manager
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=traefik-public
#         - traefik.constraint-label=traefik-public
#         - traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN}`)
#         - traefik.http.routers.grafana-http.entrypoints=http
#         - traefik.http.routers.grafana-http.middlewares=https-redirect
#         - traefik.http.routers.grafana-https.rule=Host(`grafana.${DOMAIN}`)
#         - traefik.http.routers.grafana-https.entrypoints=https
#         - traefik.http.routers.grafana-https.tls=true
#         - traefik.http.routers.grafana-https.tls.certresolver=le
#         - traefik.http.services.grafana.loadbalancer.server.port=3000
#       restart_policy:
#         condition: on-failure

# # 3RD CONTAINER
#   ### Prometheus scrapes and stores time series data (by default) for 15 days and supports client libraries
#   ### that enable it to work with other services. It even boasts PromQL to query data.
#   prometheus:
#     image: prom/prometheus-linux-arm64
#     volumes:
#       - ./prometheus/:/etc/prometheus/
#       - prometheus_data:/prometheus
#     command:
#       - "--config.file=/etc/prometheus/prometheus.yml"
#       - "--storage.tsdb.path=/prometheus"
#       - "--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24}"
#       - "--web.console.libraries=/usr/share/prometheus/console_libraries"
#       - "--web.console.templates=/usr/share/prometheus/consoles"
#     configs:
#       - source: prom_rules
#         target: /home/romelben/plg-compose/prometheus/prometheus.yml
#       - source: alert_rules
#         target: /home/romelben/plg-compose/prometheus/alert.rules
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       placement:
#         constraints:
#           - node.role==manager
#       resources:
#         limits:
#           memory: 2048M
#         reservations:
#           memory: 128M
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=traefik-public
#         - traefik.constraint-label=traefik-public
#         # HTTP configuration for Prometheus
#         - traefik.http.routers.prometheus-http.rule=Host(`prometheus.${DOMAIN}`)
#         - traefik.http.routers.prometheus-http.entrypoints=http
#         - traefik.http.routers.prometheus-http.middlewares=https-redirect
#         # HTTPS configuration for Prometheus
#         - traefik.http.routers.prometheus-https.rule=Host(`prometheus.${DOMAIN}`)
#         - traefik.http.routers.prometheus-https.entrypoints=https
#         - traefik.http.routers.prometheus-https.tls=true
#         - traefik.http.routers.prometheus-https.tls.certresolver=le
#         - traefik.http.services.prometheus.loadbalancer.server.port=9090
#         - traefik.http.middlewares.prometheus-auth.basicauth.users=${ADMIN_USER}:${HASHED_PASSWORD}
#         - traefik.http.routers.prometheus-https.middlewares=prometheus-auth

# # 4TH CONTAINER
#   ### Node exporter collects data on where it is installed. (ONLY collects from Linux distros.) Once the agent has been
#   ### installed, node exporter begins to collect data of hardware metrics (i.e. CPU Usage, Memory, etc.)
#   ### For testing purposes, the host is the localhost. If you want to use node exporter on different services,
#   ### change the "net", "pid", and "/:/host:ro,".
#   ### Documentation can be found here: https://github.com/prometheus/node_exporter
#   node-exporter:
#     image: prom/node-exporter-linux-arm64
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#       - /etc/hostname:/etc/nodename
#     command:
#       - "--path.procfs=/host/proc"
#       - "--path.sysfs=/host/sys"
#       - "--collector.filesystem.ignored-mount-points"
#       - "--collector.textfile.directory=/etc/node-exporter/"
#       - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
#       - "--no-collector.ipvs"
# #      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       mode: global
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M

# # 5TH CONTAINER
#   ### Alert manager is connected to Prometheus if there are abnormalities that need to be fixed.
#   ### This container needs to be configured a bit more on what to alert in file alertmanager/config.yml
#   alertmanager:
#     image: prom/alertmanager-linux-arm64
#     volumes:
#       - "./alertmanager/:/etc/alertmanager/"
#     networks:
#       - traefik-public
#       - monitor-hub
#     command:
#       - "--config.file=/etc/alertmanager/config.yml"
#       - "--storage.path=/alertmanager"
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role==manager
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M
#       restart_policy:
#         condition: on-failure
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=traefik-public
#       - traefik.constraint-label=traefik-public
#       # HTTP section for configuration
#       - traefik.http.routers.alertmanager-http.rule=Host(`alertmanager.${DOMAIN}`)
#       - traefik.http.routers.alertmanager-http.entrypoints=http
#       - traefik.http.routers.alertmanager-http.middlewares=https-redirect
#       # HTTPS section for configuration
#       - traefik.http.routers.alertmanager-https.rule=Host(`alertmanager.${DOMAIN}`)
#       - traefik.http.routers.alertmanager-https.entrypoints=https
#       - traefik.http.routers.alertmanager-https.tls=true
#       - traefik.http.routers.alertmanager-https.tls.certresolver=le
#       - traefik.http.services.alertmanager.loadbalancer.server.port=9093
#       - traefik.http.middlewares.alertmanager-auth.basicauth.users=${ADMIN_USER}:${HASHED_PASSWORD}
#       - traefik.http.routers.alertmanager-https.middlewares=alertmanager-auth

# # 6TH CONTAINER
#   ### CloudFlare DNS is needed if your IP address IS dynamic. If your IP address is static then disregard
#   ### this service. An API key (token) is created in CloudFlare which will ping CloudFlare
#   ### whenever the dynamic IP address changes
#   cloudflare-ddns:
#     image: oznu/cloudflare-ddns:arm64v8
#     restart: always
#     environment:
#       - API_KEY=${CF_API_KEY}
#       - ZONE=${DOMAIN}
# #      - SUBDOMAIN=${SUBDOMAIN}
#       - PROXIED=true

# # 7TH CONTAINER
# ### Portainer allows for easy access to Docker Containers, Docker Swarm, and Kubernetes.
# ### Great documentation can be found here: https://github.com/portainer/portainer-compose
# ### Currently needs work to setup with traefik.
#   portainer:
#     image: portainer/portainer-ce:linux-arm64
#     command: -H unix:///var/run/docker.sock
#     restart: always
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - portainer_data:/data
#     networks:
#         - traefik-public
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role==manager
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=traefik-public
#       - traefik.constraint-label=traefik-public
#       # HTTP configuration for Portainer
#       - traefik.http.routers.portainer-http.rule=Host(`${DOMAIN}`)
#       - traefik.http.routers.portainer-http.entrypoints=http
#       - traefik.http.routers.portainer-http.middlewares=https-redirect
#       # HTTPS configuration for Portainer
#       - traefik.http.routers.portainer-https.rule=Host(`${DOMAIN}`)
#       - traefik.http.routers.portainer-https.entrypoints=https
#       - traefik.http.routers.portainer-https.tls=true
#       - traefik.http.routers.portainer-https.tls.certresolver=le
#       - traefik.http.services.portainer.loadbalancer.server.port=9000

# # 8TH CONTAINER
# ### Watchtower will detect if any linked containers have a new image available.
# ### If a new image is available, Watchtower will automatically update and restart
# ### each container with the assigned up-to-date image.
#   watchtower:
#     image: containrrr/watchtower:arm64v8-latest
#     command:
#       - "--cleanup"
#       - "--schedule"
#       - "* * 3 * * 6"
#     restart: always
#     networks:
#       - traefik-public
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock

# # 9TH CONTAINER
# ### cAdvisor provides container users an understanding of the resource usage and performance
# ### characteristics of running instances. This will collect, aggregate, process, and export information
#   cadvisor:
#     image: zcube/cadvisor
#     networks:
#       - traefik-public
#     command:
#       - --logtostderr
#       - --docker_only
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       - /:/rootfs:ro
#       - /var/run:/var/run
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#     deploy:
#       mode: global
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M

# 10TH CONTAINER
### Vault allows for better management of secrets such as passwords in plain text, config mgmt, and
### storage of code in repositories such as GitHub, GitLab, and BitBucket.
#  vault:
#    image: arm64v8/vault
#    networks:
#      - traefik-public
#    command:
#      - --vault
#      - --server
#      - --config=/config/config.json
#    ports:
#      - 8200:8200
#    volumes:
#      - ./vault/config/:/vault/config
#    cap_add:
#      - IPC_LOCK