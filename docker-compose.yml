version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}
  alert_manager: {}
  grafana: {}
  portainer_data:

# Uploads the files necessary for the configurement of Prometheus, Node Exporter
# and Alert Manager
configs:
  prom_rules:
    file: /home/romelben/plg-compose/prometheus/prometheus.yml
  alert_rules:
    file: /home/romelben/plg-compose/prometheus/alert.rules

#### IMPORTANT: You must create the network first or you will get an error:
#### "sudo docker network create --diver=overlay traefik-public"
# When using docker-composes network, diver "overlay" to enable-host communication.
# Here is documentation on multi-host networking: https://docs.docker.com/network/network-tutorial-overlay/
networks:
  traefik-public:
    name: traefik-public
    driver: external # Use "external" if there is a pre-existing network.
    attachable: true
#  monitor-hub:
#    name: monitor-hub
#    driver: overlay
#    attachable: true # If network monitor-hub has been created, use attachable = true to attach desired containers

services:
# 1ST CONTAINER
  ### Traefik is a load balancer and HTTP reverse proxy that allows deploying microservices much easier
  ### when it comes to containerization. To the many clients it supports, here is documentation for
  ### containerization of Docker: https://doc.traefik.io/traefik/providers/docker/
  ### Here is general documentation on Traefik's command setup: https://doc.traefik.io/traefik/
  traefik:
    image: arm64v8/traefik
    networks:
      - traefik-public
    ports:
      # Use "mode: host" for Traefik to listen directly for the Client IP
      # which Traefik provides `X-Forwarded-For` or `X-Real-IP`
      - target: 80 # HTTP access
        published: 80
        mode: host
      - target: 443 # HTTPS access
        published: 443
        mode: host
    deploy:
      placement:
        constraints:
          # Make traefik run only on the node with this label
          # as the node with it has the volume for the certificate
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable traefik for this service, makes it available in the public network
        traefik.enable: true
        # Middleware redirect
        traefik.http.middlewares.https-redirect.redirectscheme.scheme: https

        # Redirection HTTP to HTTPS
        traefik.http.routers.traefik-public-http.rule: Host(`${DOMAIN}`)
        traefik.http.routers.traefik-public-http.entrypoints: http
        traefik.http.routers.traefik-public-http.middlewares: https-redirect

        # Dashboard
        traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN}`)
        traefik.http.routers.traefik.entrypoints: https
        traefik.http.routers.traefik.service: api@internal
        traefik.http.routers.traefik.tls: true
        traefik.http.routers.traefik.tls.certresolver: le
        traefik.http.routers.traefik.tls.domains[0].main: "${HOST}"
        traefik.http.routers.traefik.tls.domains[0].sans: "*.${HOST}"

        traefik.http.routers.traefik.middlewares: dashboard
        traefik.http.middlewares.dashboard.basicauth.users: ${DASHBOARD_USER}:${DASHBOARD_PASSWORD} # gather from .env

        # Use traefik-public network
        traefik.docker.network: traefik-public
        # This public traefik will use services with this bale
        traefik.constraint-label: traefik-public
        # Define the port inside of the Docker service to use
#        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    environment:
      - ${PROVIDER_ENV_FILE}=/provider.key
    command:
      - --providers.docker
      - --providers.docker.network=traefik-public
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=true
      # Add a constraint to ONLY use services with the label "traefik.constraint-label=traefik-public"
#      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --providers.file.filename=/etc/traefik/certs.toml
      - --log.level=DEBUG
      - --api

      # Cert resolvers section
      - --certificatesresolvers.le.acme.caserver=${CA_SERVER}
      - --certificatesresolvers.le.acme.email=${EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesResolvers.le.acme.tlsChallenge=${TLS_CHALLENGE}
      - --certificatesResolvers.le.acme.dnsChallenge=${DNS_CHALLENGE}
      - --certificatesResolvers.le.acme.dnsChallenge.provider=${PROVIDER}
      - --certificatesResolvers.le.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53

      # Writing logs to a file
      - --log.filePath=/logs/traefik.log
      # Supports common (Common Log Format) or json
      - --log.format=${LOG_FORMAT:-true}
      # Configure a bugger for 100 lines for logs
      - --accesslog=${ACCESSLOG:-true}
      - --accesslog.filepath=/logs/access.log
      - --accesslog.bufferingsize=${ACCESSLOG_BUFFERINGSIZE:-100}

      # Prometheus metrics exporter type
#      - --metrics.prometheus=true
      # Buckets for latency metrics
#      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    volumes:
      - "${CERT_PATH}:/certs"
      - "${ACME_PATH}:/acme.json"
      - "${CONFIG_PATH}:/etc/traefik"
      - "${LOG_PATH:-./logs}:/logs"
      - "${PROVIDER_ENV_FILE_VALUE}:/provider.key:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

# # 2ND CONTAINER
#   ### Grafana is a visual platform for monitoring data that is categorized by supported platforms
#   ### The current services that are used are Prometheus, Node Exporter, and cAdvisor.
#   ### In the future I would like to implement Promtail and Loki into Grafana to monitor logs in one
#   ### holistic tool.
#   grafana:
#     image: grafana/grafana-arm64v8-linux
#     depends_on:
#       - prometheus
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./grafana/provisioning/:/etc/grafana/provisioning/
#     env_file:
#       - ./grafana/config.monitoring
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role == manager
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=traefik-public
#         - traefik.constraint-label=traefik-public
#         - traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN}`)
#         - traefik.http.routers.grafana-http.entrypoints=http
#         - traefik.http.routers.grafana-http.middlewares=https-redirect
#         - traefik.http.routers.grafana-https.rule=Host(`grafana.${DOMAIN}`)
#         - traefik.http.routers.grafana-https.entrypoints=https
#         - traefik.http.routers.grafana-https.tls=true
#         - traefik.http.routers.grafana-https.tls.certresolver=le
#         - traefik.http.services.grafana.loadbalancer.server.port=3000
#       restart_policy:
#         condition: on-failure

# # 3RD CONTAINER
#   ### Prometheus scrapes and stores time series data (by default) for 15 days and supports client libraries
#   ### that enable it to work with other services. It even boasts PromQL to query data.
#   prometheus:
#     image: prom/prometheus-linux-arm64
#     volumes:
#       - ./prometheus/:/etc/prometheus/
#       - prometheus_data:/prometheus
#     command:
#       - "--config.file=/etc/prometheus/prometheus.yml"
#       - "--storage.tsdb.path=/prometheus"
#       - "--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24}"
#       - "--web.console.libraries=/usr/share/prometheus/console_libraries"
#       - "--web.console.templates=/usr/share/prometheus/consoles"
#     configs:
#       - source: prom_rules
#         target: /home/romelben/plg-compose/prometheus/prometheus.yml
#       - source: alert_rules
#         target: /home/romelben/plg-compose/prometheus/alert.rules
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       placement:
#         constraints:
#           - node.role==manager
#       resources:
#         limits:
#           memory: 2048M
#         reservations:
#           memory: 128M
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=traefik-public
#         - traefik.constraint-label=traefik-public
#         # HTTP configuration for Prometheus
#         - traefik.http.routers.prometheus-http.rule=Host(`prometheus.${DOMAIN}`)
#         - traefik.http.routers.prometheus-http.entrypoints=http
#         - traefik.http.routers.prometheus-http.middlewares=https-redirect
#         # HTTPS configuration for Prometheus
#         - traefik.http.routers.prometheus-https.rule=Host(`prometheus.${DOMAIN}`)
#         - traefik.http.routers.prometheus-https.entrypoints=https
#         - traefik.http.routers.prometheus-https.tls=true
#         - traefik.http.routers.prometheus-https.tls.certresolver=le
#         - traefik.http.services.prometheus.loadbalancer.server.port=9090
#         - traefik.http.middlewares.prometheus-auth.basicauth.users=${ADMIN_USER}:${HASHED_PASSWORD}
#         - traefik.http.routers.prometheus-https.middlewares=prometheus-auth

# # 4TH CONTAINER
#   ### Node exporter collects data on where it is installed. (ONLY collects from Linux distros.) Once the agent has been
#   ### installed, node exporter begins to collect data of hardware metrics (i.e. CPU Usage, Memory, etc.)
#   ### For testing purposes, the host is the localhost. If you want to use node exporter on different services,
#   ### change the "net", "pid", and "/:/host:ro,".
#   ### Documentation can be found here: https://github.com/prometheus/node_exporter
#   node-exporter:
#     image: prom/node-exporter-linux-arm64
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#       - /etc/hostname:/etc/nodename
#     command:
#       - "--path.procfs=/host/proc"
#       - "--path.sysfs=/host/sys"
#       - "--collector.filesystem.ignored-mount-points"
#       - "--collector.textfile.directory=/etc/node-exporter/"
#       - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
#       - "--no-collector.ipvs"
# #      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#     networks:
#       - traefik-public
#       - monitor-hub
#     deploy:
#       mode: global
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M

# # 5TH CONTAINER
#   ### Alert manager is connected to Prometheus if there are abnormalities that need to be fixed.
#   ### This container needs to be configured a bit more on what to alert in file alertmanager/config.yml
#   alertmanager:
#     image: prom/alertmanager-linux-arm64
#     volumes:
#       - "./alertmanager/:/etc/alertmanager/"
#     networks:
#       - traefik-public
#       - monitor-hub
#     command:
#       - "--config.file=/etc/alertmanager/config.yml"
#       - "--storage.path=/alertmanager"
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role==manager
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M
#       restart_policy:
#         condition: on-failure
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=traefik-public
#       - traefik.constraint-label=traefik-public
#       # HTTP section for configuration
#       - traefik.http.routers.alertmanager-http.rule=Host(`alertmanager.${DOMAIN}`)
#       - traefik.http.routers.alertmanager-http.entrypoints=http
#       - traefik.http.routers.alertmanager-http.middlewares=https-redirect
#       # HTTPS section for configuration
#       - traefik.http.routers.alertmanager-https.rule=Host(`alertmanager.${DOMAIN}`)
#       - traefik.http.routers.alertmanager-https.entrypoints=https
#       - traefik.http.routers.alertmanager-https.tls=true
#       - traefik.http.routers.alertmanager-https.tls.certresolver=le
#       - traefik.http.services.alertmanager.loadbalancer.server.port=9093
#       - traefik.http.middlewares.alertmanager-auth.basicauth.users=${ADMIN_USER}:${HASHED_PASSWORD}
#       - traefik.http.routers.alertmanager-https.middlewares=alertmanager-auth

# # 6TH CONTAINER
#   ### CloudFlare DNS is needed if your IP address IS dynamic. If your IP address is static then disregard
#   ### this service. An API key (token) is created in CloudFlare which will ping CloudFlare
#   ### whenever the dynamic IP address changes
#   cloudflare-ddns:
#     image: oznu/cloudflare-ddns:arm64v8
#     restart: always
#     environment:
#       - API_KEY=${CF_API_KEY}
#       - ZONE=${DOMAIN}
# #      - SUBDOMAIN=${SUBDOMAIN}
#       - PROXIED=true

# # 7TH CONTAINER
# ### Portainer allows for easy access to Docker Containers, Docker Swarm, and Kubernetes.
# ### Great documentation can be found here: https://github.com/portainer/portainer-compose
# ### Currently needs work to setup with traefik.
#   portainer:
#     image: portainer/portainer-ce:linux-arm64
#     command: -H unix:///var/run/docker.sock
#     restart: always
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - portainer_data:/data
#     networks:
#         - traefik-public
#     deploy:
#       mode: replicated
#       replicas: 1
#       placement:
#         constraints:
#           - node.role==manager
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=traefik-public
#       - traefik.constraint-label=traefik-public
#       # HTTP configuration for Portainer
#       - traefik.http.routers.portainer-http.rule=Host(`${DOMAIN}`)
#       - traefik.http.routers.portainer-http.entrypoints=http
#       - traefik.http.routers.portainer-http.middlewares=https-redirect
#       # HTTPS configuration for Portainer
#       - traefik.http.routers.portainer-https.rule=Host(`${DOMAIN}`)
#       - traefik.http.routers.portainer-https.entrypoints=https
#       - traefik.http.routers.portainer-https.tls=true
#       - traefik.http.routers.portainer-https.tls.certresolver=le
#       - traefik.http.services.portainer.loadbalancer.server.port=9000

# # 8TH CONTAINER
# ### Watchtower will detect if any linked containers have a new image available.
# ### If a new image is available, Watchtower will automatically update and restart
# ### each container with the assigned up-to-date image.
#   watchtower:
#     image: containrrr/watchtower:arm64v8-latest
#     command:
#       - "--cleanup"
#       - "--schedule"
#       - "* * 3 * * 6"
#     restart: always
#     networks:
#       - traefik-public
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock

# # 9TH CONTAINER
# ### cAdvisor provides container users an understanding of the resource usage and performance
# ### characteristics of running instances. This will collect, aggregate, process, and export information
#   cadvisor:
#     image: zcube/cadvisor
#     networks:
#       - traefik-public
#     command:
#       - --logtostderr
#       - --docker_only
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       - /:/rootfs:ro
#       - /var/run:/var/run
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#     deploy:
#       mode: global
#       resources:
#         limits:
#           memory: 128M
#         reservations:
#           memory: 64M

# 10TH CONTAINER
### Vault allows for better management of secrets such as passwords in plain text, config mgmt, and
### storage of code in repositories such as GitHub, GitLab, and BitBucket.
#  vault:
#    image: arm64v8/vault
#    networks:
#      - traefik-public
#    command:
#      - --vault
#      - --server
#      - --config=/config/config.json
#    ports:
#      - 8200:8200
#    volumes:
#      - ./vault/config/:/vault/config
#    cap_add:
#      - IPC_LOCK